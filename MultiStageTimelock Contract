// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

interface IBEP20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract MultiStageTimelock {
    IBEP20 public immutable token;
    address public immutable beneficiary;
    address public immutable owner;
    uint256 public immutable firstReleaseTime;
    uint256 public immutable secondReleaseTime;
    uint256 public totalLocked;
    uint256 public releaseCount;

    event Funded(address indexed sender, uint256 amount);
    event Released(address indexed beneficiary, uint256 amount);

    constructor(
        IBEP20 _token,
        address _beneficiary,
        uint256 _firstReleaseTime,
        uint256 _secondReleaseTime
    ) {
        require(_firstReleaseTime > block.timestamp, "First release time must be in the future");
        require(_secondReleaseTime > _firstReleaseTime, "Second release time must be after the first");

        token = _token;
        beneficiary = _beneficiary;
        owner = msg.sender;
        firstReleaseTime = _firstReleaseTime;
        secondReleaseTime = _secondReleaseTime;
    }

    function fund(uint256 amount) external {
        require(msg.sender == owner, "Only owner can fund");
        require(totalLocked == 0, "Already funded");

        require(token.transferFrom(msg.sender, address(this), amount), "Funding failed");
        totalLocked = amount;
        emit Funded(msg.sender, amount);
    }

    function release() external {
        require(msg.sender == beneficiary, "Only beneficiary can release tokens");
        require(releaseCount < 2, "All tokens already released");

        uint256 amount;
        if (releaseCount == 0 && block.timestamp >= firstReleaseTime) {
            amount = totalLocked / 2;
            releaseCount = 1;
        } else if (releaseCount == 1 && block.timestamp >= secondReleaseTime) {
            amount = totalLocked - totalLocked / 2; // Handles rounding edge cases
            releaseCount = 2;
        } else {
            revert("Tokens are not yet available for release");
        }

        require(token.transfer(beneficiary, amount), "Token transfer failed");
        emit Released(beneficiary, amount);
    }
}
